/* src/style.css */
.prosemirror-flat-list {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
  margin-left: 32px;
  margin-bottom: 0;
  position: relative;
  display: list-item;
  list-style: none;
}
.prosemirror-flat-list.ProseMirror-selectednode {
  outline: none;
}
.prosemirror-flat-list.ProseMirror-selectednode:after {
  content: "";
  position: absolute;
  left: -32px;
  right: -2px;
  top: -2px;
  bottom: -2px;
  border: 2px solid #8cf;
  pointer-events: none;
}
.prosemirror-flat-list[data-list-kind=bullet] > .list-content > p {
  display: list-item;
  list-style: disc;
}
.prosemirror-flat-list[data-list-kind=ordered] > .list-content > p {
  counter-increment: prosemirror-flat-list-counter;
}
.prosemirror-flat-list[data-list-kind=ordered] > * {
  contain: style;
}
.prosemirror-flat-list[data-list-kind=ordered] > .list-content > p::before {
  position: absolute;
  right: 100%;
  font-variant-numeric: tabular-nums;
  content: counter(prosemirror-flat-list-counter, decimal) ". ";
}
.prosemirror-flat-list[data-list-kind=ordered]:first-child,
:not(.prosemirror-flat-list[data-list-kind=ordered]) + .prosemirror-flat-list[data-list-kind=ordered] {
  counter-reset: prosemirror-flat-list-counter;
}
[data-list-order]:is(.prosemirror-flat-list[data-list-kind=ordered]:first-child, :not(.prosemirror-flat-list[data-list-kind=ordered]) + .prosemirror-flat-list[data-list-kind=ordered]) {
  counter-set: prosemirror-flat-list-counter var(--prosemirror-flat-list-order);
}
