{"tiddlers":{"$:/plugins/wikilabs/debug/custom-debug.js":{"title":"$:/plugins/wikilabs/debug/custom-debug.js","text":"/*\\\ntitle: $:/plugins/wikilabs/debug/custom-debug.js\ntype: application/javascript\nmodule-type: startup\n\nA startup module to replace the debug tooltip with a custom element.\n\n\\*/\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"custom-debug-hook\";\nexports.platforms = [\"browser\"];\nexports.before = [\"startup\"];\nexports.synchronous = true;\n\nexports.startup = function() {\n\t// Define the custom element that IS the popup\n\tif (!window.customElements.get(\"debug-info-popup\")) {\n\t\tclass DebugInfoPopup extends HTMLElement {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.attachShadow({ mode: \"open\" });\n\n\t\t\t\tconst popup = document.createElement(\"div\");\n\t\t\t\tpopup.setAttribute(\"class\", \"debug-popup\");\n\t\t\t\tthis._popup = popup;\n\n\t\t\t\tconst style = document.createElement(\"style\");\n\t\t\t\tstyle.textContent = `\n\t\t\t\t\t:host {\n\t\t\t\t\t\t/* Default values for themeable properties */\n\t\t\t\t\t\t--popup-bg-color: #fefefe;\n\t\t\t\t\t\t--popup-border: 1px solid #ccc;\n\t\t\t\t\t\t--popup-min-width: 350px;\n\t\t\t\t\t\t--popup-max-width: 600px;\n\t\t\t\t\t\t--popup-max-height: 500px;\n\t\t\t\t\t\t--popup-header-bg-color: #4CAF50;\n\t\t\t\t\t\t--popup-header-color: white;\n\t\t\t\t\t\t--function-content-color: blue;\n\t\t\t\t\t}\n\t\t\t\t\t.debug-popup {\n\t\t\t\t\t\tdisplay: none; /* Hidden by default, shown with JS */\n\t\t\t\t\t\tposition: fixed; /* Use fixed position for viewport-relative placement */\n\t\t\t\t\t\tz-index: 1000;\n\t\t\t\t\t\tbackground-color: var(--popup-bg-color);\n\t\t\t\t\t\tborder: var(--popup-border);\n\t\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\t\tpadding: 10px;\n\t\t\t\t\t\tmin-width: var(--popup-min-width);\n\t\t\t\t\t\tmax-width: var(--popup-max-width);\n\t\t\t\t\t\tmax-height: var(--popup-max-height);\n\t\t\t\t\t\toverflow-y: auto;\n\t\t\t\t\t\tbox-shadow: 0px 4px 8px 0px rgba(0,0,0,0.2);\n\t\t\t\t\t\tfont-family: \"Source Code Pro\", monospace;\n\t\t\t\t\t\tfont-size: 12px;\n\t\t\t\t\t\tline-height: 1.4;\n\t\t\t\t\t\twhite-space: pre-wrap;\n\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t}\n\t\t\t\t\t.debug-popup-table {\n\t\t\t\t\t\tborder-collapse: collapse;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t}\n\t\t\t\t\t.debug-popup-table td, .debug-popup-table th {\n\t\t\t\t\t\tborder: 1px solid #ddd;\n\t\t\t\t\t\tpadding: 3px;\n\t\t\t\t\t\tvertical-align: top;\n\t\t\t\t\t}\n\t\t\t\t\t.debug-popup-table tr:nth-child(even){background-color: #f9f9f9;}\n\t\t\t\t\t.debug-popup-table th {\n\t\t\t\t\t\tpadding-top: 4px;\n\t\t\t\t\t\tpadding-bottom: 4px;\n\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\tbackground-color: var(--popup-header-bg-color);\n\t\t\t\t\t\tcolor: var(--popup-header-color);\n\t\t\t\t\t}\n\t\t\t\t\t.debug-search-input {\n\t\t\t\t\t\twidth: 98%;\n\t\t\t\t\t\tpadding: 4px;\n\t\t\t\t\t\tmargin-bottom: 8px;\n\t\t\t\t\t\tborder: 1px solid #ccc;\n\t\t\t\t\t\tborder-radius: 3px;\n\t\t\t\t\t}\n\t\t\t\t\t.debug-function-content {\n\t\t\t\t\t\tcolor: var(--function-content-color);\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\tmargin-top: 3px;\n\t\t\t\t\t}\n\t\t\t\t`;\n\n\t\t\t\tthis.shadowRoot.append(style, popup);\n\n\t\t\t\tconst searchInput = document.createElement(\"input\");\n\t\t\t\tsearchInput.setAttribute(\"type\", \"text\");\n\t\t\t\tsearchInput.setAttribute(\"placeholder\", \"Filter variables...\");\n\t\t\t\tsearchInput.setAttribute(\"class\", \"debug-search-input\");\n\t\t\t\tsearchInput.setAttribute(\"part\", \"search-input\"); // Expose this element for styling\n\t\t\t\tthis._searchInput = searchInput;\n\t\t\t\tpopup.append(searchInput);\n\n\t\t\t\t// Add event listener for the search input\n\t\t\t\tsearchInput.addEventListener(\"input\", () => this._filterTable());\n\n\t\t\t\t// Prevent scroll events from bleeding out\n\t\t\t\tpopup.addEventListener(\"wheel\", function(event) {\n\t\t\t\t\tconst { scrollTop, scrollHeight, clientHeight } = this;\n\t\t\t\t\tconst isAtTop = scrollTop === 0 && event.deltaY < 0;\n\t\t\t\t\tconst isAtBottom = scrollHeight - clientHeight <= scrollTop && event.deltaY > 0;\n\t\t\t\t\tif (isAtTop || isAtBottom) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t});\n\n\t\t\t\t// Prevent hover events from bleeding out\n\t\t\t\tpopup.addEventListener(\"mousemove\", function(event) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t});\n\n\t\t\t\tthis._triggerElement = null;\n\t\t\t\tthis._boundEscapeKeyListener = this._escapeKeyListener.bind(this);\n\t\t\t\tthis._popupTimeout = null; // Initialize timeout ID\n\t\t\t\tthis._hideTimeout = null; // Initialize hide timeout ID\n\t\t\t\tthis._boundGlobalWheelListener = this._globalWheelListener.bind(this); // Bind global wheel listener\n\t\t\t}\n\n\t\t\t_globalWheelListener(event) {\n\t\t\t\t// Prevent scroll events on the document body if they are not originating from within the popup\n\t\t\t\tif (this._popup.style.display !== \"none\" && !this._popup.contains(event.target)) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_filterTable() {\n\t\t\t\tlet filterText = this._searchInput.value.toLowerCase();\n\t\t\t\tconst table = this._popup.querySelector(\".debug-popup-table\");\n\t\t\t\tif (!table) return;\n\n\t\t\t\tconst rows = table.querySelectorAll(\"tbody tr\");\n\n\t\t\t\tlet typeFilter = null;\n\t\t\t\tlet searchFilter = '';\n\n\t\t\t\t// Check for special type-filtering commands\n\t\t\t\tif (filterText.startsWith(':')) {\n\t\t\t\t\tconst parts = filterText.split(' ');\n\t\t\t\t\tconst command = parts[0];\n\t\t\t\t\t\n\t\t\t\t\tswitch (command) {\n\t\t\t\t\t\tcase ':m':\n\t\t\t\t\t\t\ttypeFilter = 'm';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ':p':\n\t\t\t\t\t\t\ttypeFilter = 'p';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ':f':\n\t\t\t\t\t\t\ttypeFilter = 'f';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ':w':\n\t\t\t\t\t\t\ttypeFilter = 'w';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ':-':\n\t\t\t\t\t\t\ttypeFilter = ''; // Empty string for no type\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeFilter !== null) {\n\t\t\t\t\t\tsearchFilter = parts.slice(1).join(' ').trim();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Not a valid command, treat the whole thing as a normal search\n\t\t\t\t\t\tsearchFilter = filterText;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsearchFilter = filterText;\n\t\t\t\t}\n\n\t\t\t\trows.forEach(row => {\n\t\t\t\t\tconst typeCell = row.cells[0];\n\t\t\t\t\tconst variableCell = row.cells[1];\n\t\t\t\t\tconst valueCell = row.cells[2];\n\n\t\t\t\t\tif (!typeCell || !variableCell || !valueCell) return;\n\n\t\t\t\t\tconst typeText = typeCell.textContent.toLowerCase();\n\t\t\t\t\tconst variableText = variableCell.textContent.toLowerCase();\n\t\t\t\t\tconst valueText = valueCell.textContent.toLowerCase();\n\n\t\t\t\t\tlet typeMatch = true;\n\t\t\t\t\tif (typeFilter !== null) {\n\t\t\t\t\t\ttypeMatch = (typeText === typeFilter);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet searchMatch = true;\n\t\t\t\t\tif (searchFilter) {\n\t\t\t\t\t\tsearchMatch = variableText.includes(searchFilter) || valueText.includes(searchFilter);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeMatch && searchMatch) {\n\t\t\t\t\t\trow.style.display = \"\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\trow.style.display = \"none\";\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsetData(data) {\n\t\t\t\t// Clear the search input\n\t\t\t\tif (this._searchInput) {\n\t\t\t\t\tthis._searchInput.value = \"\";\n\t\t\t\t}\n\n\t\t\t\t// Find and remove the old table if it exists\n\t\t\t\tconst oldTable = this._popup.querySelector(\".debug-popup-table\");\n\t\t\t\tif (oldTable) {\n\t\t\t\t\toldTable.remove();\n\t\t\t\t}\n\n\t\t\t\tconst table = document.createElement(\"table\");\n\t\t\t\ttable.setAttribute(\"class\", \"debug-popup-table\");\n\n\t\t\t\tconst thead = document.createElement(\"thead\");\n\t\t\t\tconst headerRow = document.createElement(\"tr\");\n\t\t\t\tthead.append(headerRow);\n\n\t\t\t\t// Create headers safely using textContent to prevent XSS\n\t\t\t\tconst th1 = document.createElement(\"th\"); // Empty for type column\n\t\t\t\tconst th2 = document.createElement(\"th\");\n\t\t\t\tth2.textContent = \"Variable\";\n\t\t\t\tconst th3 = document.createElement(\"th\");\n\t\t\t\tth3.textContent = \"Value\";\n\n\t\t\t\theaderRow.append(th1, th2, th3);\n\t\t\t\ttable.append(thead);\n\n\t\t\t\tconst tbody = document.createElement(\"tbody\");\n\t\t\t\tfor (const key in data) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(data, key)) {\n\t\t\t\t\t\tconst row = document.createElement(\"tr\");\n\t\t\t\t\t\tconst typeCell = document.createElement(\"td\");\n\t\t\t\t\t\tconst keyCell = document.createElement(\"td\");\n\t\t\t\t\t\tconst valueCell = document.createElement(\"td\");\n\n\t\t\t\t\t\ttypeCell.textContent = data[key].type || \"\";\n\t\t\t\t\t\tkeyCell.textContent = key;\n\n\t\t\t\t\t\t// Special handling for functions to show definition and content\n\t\t\t\t\t\tif (data[key].type === 'f' && data[key].content) {\n\t\t\t\t\t\t\tconst valueContainer = document.createElement(\"div\");\n\n\t\t\t\t\t\t\tconst definitionSpan = document.createElement(\"span\");\n\t\t\t\t\t\t\tdefinitionSpan.textContent = data[key].value;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconst contentSpan = document.createElement(\"span\");\n\t\t\t\t\t\t\tcontentSpan.textContent = data[key].content;\n\t\t\t\t\t\t\tcontentSpan.classList.add(\"debug-function-content\");\n\n\t\t\t\t\t\t\tvalueContainer.append(definitionSpan, contentSpan);\n\t\t\t\t\t\t\tvalueCell.append(valueContainer);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Default behavior for all other types\n\t\t\t\t\t\t\tvalueCell.textContent = data[key].value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trow.append(typeCell, keyCell, valueCell);\n\t\t\t\t\t\ttbody.append(row);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttable.append(tbody);\n\t\t\t\tthis._popup.append(table);\n\t\t\t}\n\n\t\t\tshowPopup(triggerElement, mouseX, mouseY) {\n\t\t\t\tif (triggerElement && typeof triggerElement.getBoundingClientRect === \"function\") {\n\t\t\t\t\tthis._triggerElement = triggerElement;\n\t\t\t\t}\n\n\t\t\t\tif (!this._triggerElement) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst popup = this._popup;\n\t\t\t\tpopup.style.display = \"block\";\n\n\t\t\t\tconst popupRect = popup.getBoundingClientRect();\n\t\t\t\tconst viewportWidth = window.innerWidth;\n\t\t\t\tconst viewportHeight = window.innerHeight;\n\n\t\t\t\tlet top = mouseY;\n\t\t\t\tlet left = mouseX;\n\n\t\t\t\tif (top < 0) {\n\t\t\t\t\ttop = 5;\n\t\t\t\t}\n\n\t\t\t\tif (top + popupRect.height > viewportHeight) {\n\t\t\t\t\ttop = viewportHeight - popupRect.height - 5;\n\t\t\t\t}\n\n\t\t\t\tif (left < 0) {\n\t\t\t\t\tleft = 5;\n\t\t\t\t}\n\t\t\t\tif (left + popupRect.width > viewportWidth) {\n\t\t\t\t\tleft = viewportWidth - popupRect.width - 5;\n\t\t\t\t}\n\n\t\t\t\tpopup.style.top = top + \"px\";\n\t\t\t\tpopup.style.left = left + \"px\";\n\n\t\t\t\t// Add Escape key listener\n\t\t\t\tdocument.addEventListener(\"keydown\", this._boundEscapeKeyListener, true);\n\t\t\t\t// Add global wheel listener to prevent scrolling outside the popup\n\t\t\t\tdocument.body.addEventListener(\"wheel\", this._boundGlobalWheelListener, { passive: false });\n\t\t\t}\n\n\t\t\thide() {\n\t\t\t\tthis._popup.style.display = \"none\";\n\t\t\t\tdocument.removeEventListener(\"keydown\", this._boundEscapeKeyListener, true);\n\t\t\t\t// Remove global wheel listener when popup is hidden\n\t\t\t\tdocument.body.removeEventListener(\"wheel\", this._boundGlobalWheelListener);\n\t\t\t}\n\n\t\t\t_escapeKeyListener(event) {\n\t\t\t\tif (event.key === \"Escape\") {\n\t\t\t\t\tthis.hide();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Methods to handle mouse events on the popup itself\n\t\t\thandlePopupMouseEnter() {\n\t\t\t\tif (this._hideTimeout) {\n\t\t\t\t\tclearTimeout(this._hideTimeout);\n\t\t\t\t\tthis._hideTimeout = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thandlePopupMouseLeave() {\n\t\t\t\tif (this._popup.style.display !== \"none\") { // Only hide if currently visible\n\t\t\t\t\tif (this._hideTimeout) {\n\t\t\t\t\t\tclearTimeout(this._hideTimeout);\n\t\t\t\t\t}\n\t\t\t\t\tthis._hideTimeout = setTimeout(() => {\n\t\t\t\t\t\tthis.hide();\n\t\t\t\t\t\tthis._hideTimeout = null;\n\t\t\t\t\t}, 900); // 900ms delay before hiding\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twindow.customElements.define(\"debug-info-popup\", DebugInfoPopup);\n\t}\n\n\t// --- Intersection Observer Implementation ---\n\n\tlet globalDebugPopup = document.getElementById(\"tw-debug-popup-instance\");\n\tif (!globalDebugPopup) {\n\t\tglobalDebugPopup = document.createElement(\"debug-info-popup\");\n\t\tglobalDebugPopup.id = \"tw-debug-popup-instance\";\n\t\tdocument.body.appendChild(globalDebugPopup);\n\n\t\t// Add event listeners to the popup itself to manage hide delay\n\t\tglobalDebugPopup.addEventListener(\"mouseenter\", function() {\n\t\t\tglobalDebugPopup.handlePopupMouseEnter();\n\t\t});\n\t\tglobalDebugPopup.addEventListener(\"mouseleave\", function() {\n\t\t\tglobalDebugPopup.handlePopupMouseLeave();\n\t\t});\n\t}\n\n\t// Use a WeakMap to associate DOM nodes with their specific data and listeners\n\tconst nodeDataMap = new WeakMap();\n\n\t/**\n\t * Callback for the IntersectionObserver. Adds/removes event listeners as elements\n\t * enter or leave the viewport.\n\t * @param {IntersectionObserverEntry[]} entries - The entries that have changed.\n\t */\n\tconst handleIntersection = (entries) => {\n\t\tfor (const entry of entries) {\n\t\t\tconst domNode = entry.target;\n\t\t\tconst data = nodeDataMap.get(domNode);\n\n\t\t\tif (!data) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (entry.isIntersecting) {\n\t\t\t\t// Element is in view: add listeners if they aren't already active\n\t\t\t\tif (!data.listenersAttached) {\n\t\t\t\t\tdomNode.addEventListener(\"mouseenter\", data.mouseenterListener, true);\n\t\t\t\t\tdomNode.addEventListener(\"mouseleave\", data.mouseleaveListener, true);\n\t\t\t\t\tdata.listenersAttached = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Element is out of view: remove listeners if they are active\n\t\t\t\tif (data.listenersAttached) {\n\t\t\t\t\tdomNode.removeEventListener(\"mouseenter\", data.mouseenterListener, true);\n\t\t\t\t\tdomNode.removeEventListener(\"mouseleave\", data.mouseleaveListener, true);\n\t\t\t\t\tdata.listenersAttached = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Create a single observer to watch all relevant elements\n\tconst observer = new IntersectionObserver(handleIntersection);\n\n\t$tw.hooks.addHook(\"th-dom-rendering-element\", function(domNode, widget) {\n\n\t\t/**\n\t\t * Gathers and formats all relevant variable data from the current widget context.\n\t\t * @param {object} widget - The widget instance to inspect.\n\t\t * @returns {object} A formatted object containing variable data for the popup.\n\t\t */\n\t\tfunction _gatherVariableData(widget) {\n\t\t\tvar test = widget.getVariable(\"transclusion\");\n\t\t\tvar data = Object.create(null);\n\t\t\tvar allVars = Object.create(null);\n\t\t\tvar filter;\n\n\t\t\tfor (var v in widget.variables) {\n\t\t\t\tlet variable = widget.parentWidget && widget.parentWidget.variables[v];\n\t\t\t\tlet entry = null;\n\n\t\t\t\tif (variable && variable.isFunctionDefinition) {\n\t\t\t\t\tif (widget.getVariable(\"tv-debug-functions\") === \"yes\") {\n\t\t\t\t\t\tentry = {\n\t\t\t\t\t\t\tvalue: variable.value,\n\t\t\t\t\t\t\ttype: 'f',\n\t\t\t\t\t\t\tcontent: widget.getVariable(v, { defaultValue: \"\" })\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} else if (variable && variable.isProcedureDefinition) {\n\t\t\t\t\tif (widget.getVariable(\"tv-debug-procedures\") === \"yes\") {\n\t\t\t\t\t\tentry = { value: widget.getVariable(v, { defaultValue: \"\" }), type: 'p' };\n\t\t\t\t\t}\n\t\t\t\t} else if (variable && variable.isMacroDefinition) {\n\t\t\t\t\tif (widget.getVariable(\"tv-debug-macros\") === \"yes\") {\n\t\t\t\t\t\tentry = { value: widget.getVariable(v, { defaultValue: \"\" }), type: 'm' };\n\t\t\t\t\t}\n\t\t\t\t} else if (variable && variable.isWidgetDefinition) {\n\t\t\t\t\tif (widget.getVariable(\"tv-debug-widgets\") === \"yes\") {\n\t\t\t\t\t\tentry = { value: widget.getVariable(v, { defaultValue: \"\" }), type: 'w' };\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tentry = { value: widget.getVariable(v, { defaultValue: \"\" }), type: '' };\n\t\t\t\t}\n\n\t\t\t\tif (entry && entry.value !== undefined) {\n\t\t\t\t\tallVars[v] = entry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfilter = widget.getVariable(\"tv-debug-filter\", { defaultValue: \"[limit[100]]\" });\n\t\t\tif (filter) {\n\t\t\t\tvar filteredVars = widget.wiki.compileFilter(filter).call(widget.wiki, widget.wiki.makeTiddlerIterator(Object.keys(allVars)));\n\t\t\t\t$tw.utils.each(filteredVars, function(name) {\n\t\t\t\t\tdata[name] = allVars[name];\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar finalData = Object.create(null);\n\t\t\tfinalData[\"transclusion\"] = { value: test || \"\", type: \"\" };\n\n\t\t\t$tw.utils.each((filter) ? data : allVars, function(el, title) {\n\t\t\t\tlet str = \"\";\n\t\t\t\tif (typeof el.value === \"string\" && el.value.includes(\"\\n\")) {\n\t\t\t\t\tstr = el.value.split(\"\\n\")[0] + \" ...\";\n\t\t\t\t} else {\n\t\t\t\t\tstr = (el.value) ? String(el.value) : \"\";\n\t\t\t\t}\n\t\t\t\tif (str) {\n\t\t\t\t\tfinalData[title] = { value: str, type: el.type, content: el.content }; // Preserve content\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn finalData;\n\t\t}\n\n\t\t/**\n\t\t * The callback function to execute after a delay when the mouse enters the element.\n\t\t * It gathers data and shows the popup.\n\t\t * @param {MouseEvent} event - The mouse event.\n\t\t */\n\t\tconst showPopupCallback = (event) => {\n\t\t\tif (globalDebugPopup._popup.style.display !== \"none\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst finalData = _gatherVariableData(widget);\n\t\t\tglobalDebugPopup.setData(finalData);\n\t\t\tglobalDebugPopup.showPopup(domNode, event.clientX, event.clientY);\n\t\t\tglobalDebugPopup._popupTimeout = null; // Clear timeout ID after execution\n\t\t};\n\n\t\tconst mouseenterListener = function(event) {\n\t\t\t// Clear any existing timeout to prevent multiple popups or flickering\n\t\t\tif (globalDebugPopup._popupTimeout) {\n\t\t\t\tclearTimeout(globalDebugPopup._popupTimeout);\n\t\t\t}\n\t\t\t// Set a timeout to show the popup\n\t\t\tglobalDebugPopup._popupTimeout = setTimeout(() => showPopupCallback(event), 1000); // Delay to show popup\n\t\t};\n\n\t\tconst mouseleaveListener = function(event) {\n\t\t\t// Clear the show timeout if mouse leaves before popup shows\n\t\t\tif (globalDebugPopup._popupTimeout) {\n\t\t\t\tclearTimeout(globalDebugPopup._popupTimeout);\n\t\t\t\tglobalDebugPopup._popupTimeout = null;\n\t\t\t}\n\t\t\t// Set a hide timeout if the popup is visible\n\t\t\tif (globalDebugPopup._popup.style.display !== \"none\") {\n\t\t\t\tif (globalDebugPopup._hideTimeout) {\n\t\t\t\t\tclearTimeout(globalDebugPopup._hideTimeout);\n\t\t\t\t}\n\t\t\t\tglobalDebugPopup._hideTimeout = setTimeout(() => {\n\t\t\t\t\tglobalDebugPopup.hide();\n\t\t\t\t\tglobalDebugPopup._hideTimeout = null;\n\t\t\t\t}, 900); // Delay before hiding\n\t\t\t}\n\t\t};\n\n\t\t// Store the listeners and their state in the WeakMap, associated with the domNode\n\t\tnodeDataMap.set(domNode, {\n\t\t\tmouseenterListener: mouseenterListener,\n\t\t\tmouseleaveListener: mouseleaveListener,\n\t\t\tlistenersAttached: false // Start with listeners detached\n\t\t});\n\n\t\t// Start observing the element, but only if it is a valid Element\n\t\tif (domNode instanceof Element) {\n\t\t\tif(widget.getVariable(\"tv-debug\") === \"yes\") {\n\t\t\t\tdomNode.setAttribute(\"data-debug-xxxx\", widget.getVariable(\"transclusion\"));\n\t\t\t\tobserver.observe(domNode);\n\t\t\t}\n\t\t}\n\t});\n};","type":"application/javascript","module-type":"startup"},"$:/plugins/wikilabs/debug/json-tree.js":{"title":"$:/plugins/wikilabs/debug/json-tree.js","text":"/*\\\ntitle: $:/plugins/wikilabs/debug/json-tree.js\ntype: application/javascript\nmodule-type: startup\n\nA startup module to create a json-tree custom html element.\n\n\\*/\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"json-tree-startup\";\nexports.platforms = [\"browser\"];\nexports.before = [\"startup\"];\nexports.synchronous = true;\n\nexports.startup = function() {\n\t// Define the custom element\n\tif (!window.customElements.get(\"json-tree\")) {\n\t\tclass JsonTree extends HTMLElement {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.attachShadow({ mode: \"open\" });\n\t\t\t\tconst style = document.createElement(\"style\");\n\t\t\t\tstyle.textContent = `\n\t\t\t\t\t:host {\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\tfont-family: \"Source Code Pro\", monospace;\n\t\t\t\t\t\tfont-size: 12px;\n\t\t\t\t\t\tline-height: 1.3;\n\t\t\t\t\t\toverflow-y: auto;\n\t\t\t\t\t\tborder: 1px solid #ddd;\n\t\t\t\t\t\tpadding: 10px;\n\t\t\t\t\t\tresize: vertical;\n\t\t\t\t\t}\n\t\t\t\t\t.tree {\n\t\t\t\t\t\tpadding-left: 1em;\n\t\t\t\t\t}\n\t\t\t\t\t.tree > details:first-child {\n\t\t\t\t\t\tborder-left: none;\n\t\t\t\t\t\tmargin-left: 0;\n\t\t\t\t\t\tpadding-left: 0;\n\t\t\t\t\t}\n\t\t\t\t\tdetails {\n\t\t\t\t\t\tborder-left: 1px solid #ccc;\n\t\t\t\t\t\tpadding-left: 1em;\n\t\t\t\t\t\tmargin-left: 1em;\n\t\t\t\t\t}\n\t\t\t\t\tsummary {\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\toutline: none;\n\t\t\t\t\t}\n\t\t\t\t\tsummary:hover {\n\t\t\t\t\t\tcolor: blue;\n\t\t\t\t\t}\n\t\t\t\t\tsummary::marker {\n\t\t\t\t\t\tcolor: #666;\n\t\t\t\t\t}\n\t\t\t\t\tdetails:not([open]) > summary::marker {\n\t\t\t\t\t\tcolor: red;\n\t\t\t\t\t}\n\t\t\t\t\t.key {\n\t\t\t\t\t\tcolor: #666;\n\t\t\t\t\t}\n\t\t\t\t\t.string {\n\t\t\t\t\t\tcolor: #a31515;\n\t\t\t\t\t}\n\t\t\t\t\t.number {\n\t\t\t\t\t\tcolor: #098658;\n\t\t\t\t\t}\n\t\t\t\t\t.boolean {\n\t\t\t\t\t\tcolor: #0000ff;\n\t\t\t\t\t}\n\t\t\t\t\t.null {\n\t\t\t\t\t\tcolor: #800080;\n\t\t\t\t\t}\n\t\t\t\t\t.value {\n\t\t\t\t\t\tmargin-left: 1em;\n\t\t\t\t\t}\n\t\t\t\t`\n\t\t\t\tthis.shadowRoot.append(style);\n\t\t\t\tthis._container = document.createElement(\"div\");\n\t\t\t\tthis._container.setAttribute(\"class\", \"tree\");\n\t\t\t\tthis.shadowRoot.append(this._container);\n\t\t\t\tthis._boundUpdateMaxHeight = this._updateMaxHeight.bind(this);\n\t\t\t}\n\n\t\t\tconnectedCallback() {\n\t\t\t\tthis.render();\n\t\t\t\tthis._updateMaxHeight();\n\t\t\t\twindow.addEventListener(\"resize\", this._boundUpdateMaxHeight);\n\t\t\t}\n\n\t\t\tdisconnectedCallback() {\n\t\t\t\twindow.removeEventListener(\"resize\", this._boundUpdateMaxHeight);\n\t\t\t}\n\n\t\t\t_updateMaxHeight() {\n\t\t\t\tconst rect = this.getBoundingClientRect();\n\t\t\t\tconst availableHeight = window.innerHeight - rect.top;\n\t\t\t\tconst margin = 40; // A bit of space at the bottom\n\t\t\t\tthis.style.maxHeight = (availableHeight - margin) + \"px\";\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\tconst sourceTiddler = this.getAttribute(\"tiddler\") || \"$:/plugins/wikilabs/debug/test.json\";\n\t\t\t\tconst tiddler = $tw.wiki.getTiddler(sourceTiddler);\n\t\t\t\tlet data;\n\t\t\t\tif (tiddler) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdata = JSON.parse(tiddler.fields.text);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthis._container.textContent = \"Invalid JSON in tiddler: \" + sourceTiddler;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._container.textContent = \"Source tiddler not found: \" + sourceTiddler;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst blockListAttr = this.getAttribute(\"block-list\");\n\t\t\t\tthis._blockList = blockListAttr ? blockListAttr.split(\" \") : [];\n\n\t\t\t\tthis._container.innerHTML = \"\"; // Clear previous content\n\t\t\t\tconst stateAttr = this.getAttribute(\"state\");\n\t\t\t\tconst stateDataTiddlerTitle = stateAttr || \"_\"; // Default to \"_\" if not provided\n\t\t\t\tconst tree = this._createTreeElement(data, null, \"\", stateDataTiddlerTitle); // Initial empty path and state tiddler title\n\t\t\t\tthis._container.append(tree);\n\t\t\t}\n\n\t\t\t_createTreeElement(data, key, currentPath, stateDataTiddlerTitle) {\n\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\treturn this._createArrayElement(data, key, currentPath, stateDataTiddlerTitle);\n\t\t\t\t} else if (typeof data === \"object\" && data !== null) {\n\t\t\t\t\treturn this._createObjectElement(data, key, currentPath, stateDataTiddlerTitle);\n\t\t\t\t} else {\n\t\t\t\t\tconst fragment = document.createDocumentFragment();\n\t\t\t\t\tif (key !== null) {\n\t\t\t\t\t\tconst keySpan = document.createElement(\"span\");\n\t\t\t\t\t\tkeySpan.className = \"key\";\n\t\t\t\t\t\tkeySpan.textContent = (typeof key === 'number') ? `${key}: ` : `\"${key}\": `;\n\t\t\t\t\t\tfragment.append(keySpan);\n\t\t\t\t\t}\n\t\t\t\t\tfragment.append(this._createValueElement(data));\n\t\t\t\t\treturn fragment;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_createObjectElement(obj, key, currentPath, stateDataTiddlerTitle) {\n\t\t\t\tconst details = document.createElement(\"details\");\n\t\t\t\t// const stateDataTiddlerTitle = \"_\"; // Now passed as parameter\n\t\t\t\tconst stateKey = currentPath; // The key within the data tiddler\n\t\t\t\tconst stateData = $tw.wiki.getTiddlerDataCached(stateDataTiddlerTitle, {});\n\t\t\t\tdetails.open = (stateData[stateKey] === undefined) ? true : (stateData[stateKey] !== \"hide\");\n\t\t\t\tdetails.setAttribute(\"data-state-key\", stateKey); // For event listener\n\t\t\t\tdetails.addEventListener(\"toggle\", (event) => {\n\t\t\t\t\tconst keyToUpdate = event.target.getAttribute(\"data-state-key\");\n\t\t\t\t\tif (keyToUpdate) {\n\t\t\t\t\t\tlet currentData = $tw.wiki.getTiddlerDataCached(stateDataTiddlerTitle, {});\n\t\t\t\t\t\tcurrentData = {...currentData}; // Create a mutable copy\n\t\t\t\t\t\tif (event.target.open) {\n\t\t\t\t\t\t\tdelete currentData[keyToUpdate]; // Remove key if open (default)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrentData[keyToUpdate] = \"hide\"; // Set to hide if closed\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$tw.wiki.addTiddler(new $tw.Tiddler({\n\t\t\t\t\t\t\ttitle: stateDataTiddlerTitle,\n\t\t\t\t\t\t\ttype: \"application/json\", // Assuming data tiddlers are JSON\n\t\t\t\t\t\t\ttext: JSON.stringify(currentData, null, 2)\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst summary = document.createElement(\"summary\");\n\n\t\t\t\tif (key !== null) {\n\t\t\t\t\tconst keySpan = document.createElement(\"span\");\n\t\t\t\t\tkeySpan.className = \"key\";\n\t\t\t\t\tkeySpan.textContent = `\"${key}\": `;\n\t\t\t\t\tsummary.append(keySpan);\n\t\t\t\t}\n\t\t\t\tsummary.append(\"{...}\");\n\n\t\t\t\tdetails.append(summary);\n\n\t\t\t\tconst list = document.createElement(\"div\");\n\t\t\t\tlist.className = \"value\";\n\t\t\t\tfor (const newKey in obj) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(obj, newKey)) {\n\t\t\t\t\t\tif (this._blockList.includes(newKey)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst item = document.createElement(\"div\");\n\t\t\t\t\t\tconst newPath = (currentPath ? `${currentPath}/${newKey}` : newKey);\n\t\t\t\t\t\titem.append(this._createTreeElement(obj[newKey], newKey, newPath, stateDataTiddlerTitle));\n\t\t\t\t\t\tlist.append(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdetails.append(list);\n\t\t\t\treturn details;\n\t\t\t}\n\n\t\t\t_createArrayElement(arr, key, currentPath, stateDataTiddlerTitle) {\n\t\t\t\tconst details = document.createElement(\"details\");\n\t\t\t\t// const stateDataTiddlerTitle = \"_\"; // Now passed as parameter\n\t\t\t\tconst stateKey = currentPath; // The key within the data tiddler\n\t\t\t\tconst stateData = $tw.wiki.getTiddlerDataCached(stateDataTiddlerTitle, {});\n\t\t\t\tdetails.open = (stateData[stateKey] === undefined) ? (key !== \"orderedAttributes\") : (stateData[stateKey] !== \"hide\");\n\t\t\t\tdetails.setAttribute(\"data-state-key\", stateKey); // For event listener\n\t\t\t\tdetails.addEventListener(\"toggle\", (event) => {\n\t\t\t\t\tconst keyToUpdate = event.target.getAttribute(\"data-state-key\");\n\t\t\t\t\tif (keyToUpdate) {\n\t\t\t\t\t\tlet currentData = $tw.wiki.getTiddlerDataCached(stateDataTiddlerTitle, {});\n\t\t\t\t\t\tcurrentData = {...currentData}; // Create a mutable copy\n\t\t\t\t\t\tif (event.target.open) {\n\t\t\t\t\t\t\tdelete currentData[keyToUpdate]; // Remove key if open (default)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrentData[keyToUpdate] = \"hide\"; // Set to hide if closed\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$tw.wiki.addTiddler(new $tw.Tiddler({\n\t\t\t\t\t\t\ttitle: stateDataTiddlerTitle,\n\t\t\t\t\t\t\ttype: \"application/json\", // Assuming data tiddlers are JSON\n\t\t\t\t\t\t\ttext: JSON.stringify(currentData, null, 2)\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst summary = document.createElement(\"summary\");\n\n\t\t\t\tif (key !== null) {\n\t\t\t\t\tconst keySpan = document.createElement(\"span\");\n\t\t\t\t\tkeySpan.className = \"key\";\n\t\t\t\t\t// Use the key for arrays too, for consistency\n\t\t\t\t\tkeySpan.textContent = (typeof key === 'number') ? `${key}: ` : `\"${key}\": `;\n\t\t\t\t\tsummary.append(keySpan);\n\t\t\t\t}\n\t\t\t\tsummary.append(`[...] (${arr.length} items)`);\n\n\t\t\t\tdetails.append(summary);\n\n\t\t\t\tconst list = document.createElement(\"div\");\n\t\t\t\tlist.className = \"value\";\n\t\t\t\tarr.forEach((value, index) => {\n\t\t\t\t\tconst item = document.createElement(\"div\");\n\t\t\t\t\tconst newPath = (currentPath ? `${currentPath}/${index}` : String(index));\n\t\t\t\t\titem.append(this._createTreeElement(value, index, newPath, stateDataTiddlerTitle));\n\t\t\t\t\tlist.append(item);\n\t\t\t\t});\n\t\t\t\tdetails.append(list);\n\t\t\t\treturn details;\n\t\t\t}\n\n\t\t\t_createValueElement(value) {\n\t\t\t\tconst span = document.createElement(\"span\");\n\t\t\t\tconst type = typeof value;\n\t\t\t\tspan.className = type;\n\t\t\t\tif (type === \"string\") {\n\t\t\t\t\tspan.textContent = `\"${value}\"`\n\t\t\t\t} else if (value === null) {\n\t\t\t\t\tspan.textContent = \"null\";\n\t\t\t\t\tspan.className = \"null\";\n\t\t\t\t} else {\n\t\t\t\t\tspan.textContent = String(value);\n\t\t\t\t}\n\t\t\t\treturn span;\n\t\t\t}\n\t\t}\n\t\twindow.customElements.define(\"json-tree\", JsonTree);\n\t}\n};","type":"application/javascript","module-type":"startup"},"$:/plugins/wikilabs/debug/test.json":{"title":"$:/plugins/wikilabs/debug/test.json","type":"application/json","text":"[\n    {\n        \"type\": \"list\",\n        \"start\": 0,\n        \"attributes\": {\n            \"filter\": {\n                \"start\": 6,\n                \"name\": \"filter\",\n                \"type\": \"string\",\n                \"value\": \"[range[2]]\",\n                \"end\": 26\n            },\n            \"variable\": {\n                \"start\": 26,\n                \"name\": \"variable\",\n                \"type\": \"string\",\n                \"value\": \"x\",\n                \"end\": 39\n            }\n        },\n        \"orderedAttributes\": [\n            {\n                \"start\": 6,\n                \"name\": \"filter\",\n                \"type\": \"string\",\n                \"value\": \"[range[2]]\",\n                \"end\": 26\n            },\n            {\n                \"start\": 26,\n                \"name\": \"variable\",\n                \"type\": \"string\",\n                \"value\": \"x\",\n                \"end\": 39\n            }\n        ],\n        \"tag\": \"$list\",\n        \"end\": 70,\n        \"openTagStart\": 0,\n        \"openTagEnd\": 40,\n        \"isBlock\": true,\n        \"children\": [\n            {\n                \"type\": \"text\",\n                \"start\": 42,\n                \"attributes\": {\n                    \"text\": {\n                        \"start\": 48,\n                        \"name\": \"text\",\n                        \"type\": \"substituted\",\n                        \"rawValue\": \"$(x)$ test\",\n                        \"end\": 66\n                    }\n                },\n                \"orderedAttributes\": [\n                    {\n                        \"start\": 48,\n                        \"name\": \"text\",\n                        \"type\": \"substituted\",\n                        \"rawValue\": \"$(x)$ test\",\n                        \"end\": 66\n                    }\n                ],\n                \"tag\": \"$text\",\n                \"isSelfClosing\": true,\n                \"end\": 68,\n                \"isBlock\": true,\n                \"rule\": \"html\"\n            }\n        ],\n        \"closeTagEnd\": 70,\n        \"closeTagStart\": 70,\n        \"rule\": \"html\"\n    }\n]"}}}